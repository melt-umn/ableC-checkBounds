#ifndef __CHECK_BOUNDS_XH
#define __CHECK_BOUNDS_XH

# include <stdbool.h>
# include <stdint.h>

extern struct _bounds_map *_BOUNDS_MAP;

struct _ptr_bound_pair {
    const void *fst;
    size_t snd;
};

static struct _ptr_bound_pair *_ptrboundpair_new(const void *fst, size_t snd)
{
    struct _ptr_bound_pair *self = malloc(sizeof(struct _ptr_bound_pair));
    self->fst = fst;
    self->snd = snd;
    return self;
}

struct _bounds_list {
    struct _ptr_bound_pair *x;
    struct _bounds_list *xs;
};

/** @return a newly allocated and initialized singly linked list. */
static inline struct _bounds_list *_boundslist_new(void)
{
    return NULL;
}

/** @return a newly constructed list with x as the head and xs as the tail. */
static struct _bounds_list *_boundslist_cons(struct _ptr_bound_pair *x,
        struct _bounds_list *xs)
{
    struct _bounds_list *self = malloc(sizeof(struct _bounds_list));
    self->x = x;
    self->xs = xs;
    return self;
}

struct _bounds_map {
    struct _bounds_list *l;
};

static inline struct _bounds_map *_boundsmap_new(void)
{
    struct _bounds_map *self = malloc(sizeof(struct _bounds_map));
    self->l = _boundslist_new();
    return self;
}

static void _boundsmap_insert(struct _bounds_map *self, const void *key, size_t value)
{
    self->l = _boundslist_cons(_ptrboundpair_new(key, value), self->l);
}

static size_t _boundsmap_find(const struct _bounds_map *self, const void * check key)
{
    struct _bounds_list *l = self->l;
    while (l != NULL) {
        if (l->x->fst == key) {
          return l->x->snd;
        }
        l = l->xs;
    }
    return 0;
}

#endif

